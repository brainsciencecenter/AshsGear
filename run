#!/bin/bash  -x

#
# All atlases use 
#    docker.io/pyushkevich/ashs-base
# except for ASHS-PMC-T1 which uses:
#    docker.io/pyushkevich/ashs-t1-base
# and ASHS-PMC-7T-T1 which uses:
#    docker.io/longxie/ashs-7t-t1
#
# dss_ashs_run.sh is called the same for all Atlases
#    /app/dss_ashs_run.sh -w mywork -r /app/ashs -t $TicketId -a ${AtlasDir}
# except for ASHS-HarP which is called as:
#    /app/dss_ashs_run.sh -w mywork -r /app/ashs -t $TicketId -a ${SAtlasDir} -I $AtlasICVDir -g T1 -f T1 -L 101 -R 102 -J 100
#
# dss_ashs_run.sh pulls out the T1 and T2 layers, setups up the ASHS_HOOK_SCRIPT, and ASHS_HOOK_DATA 
#    ASHS_HOOK_DATA=$TicketID
#    [[ $ICV_ATLAS ]] && ASHS_HOOK_DATA+=",ASHS,0,0,0.5"
# and calls
#    $ASHS_ROOT/bin/ashs_main.sh -a $ASHS_ATLAS -g $T1_FILE -f $T2_FILE -w $WORKDIR/ashs -I $IDSTRING -H -P
#
# If doing ICV, Re-exports ASHS_HOOK_DATA and runs
#   $ASHS_ROOT/bin/ashs_main.sh -a $ICV_ATLAS -g $T1_FILE -f $T1_FILE -w $WORKDIR/ashs_icv -I $IDSTRING -H -P -B
#
# -P is to use GNU Parallel
# -B is to skip the initial registration and reuse results of initial joint label fusion
# -H use external hooks to report progress, errors and warnings
#
# dss_ashs_run.sh -L 101 -R 102 -J 100 =>
#   SHIFT_LEFT=101
#   SHIFT_RIGHT=102
#   SHIFT_ICV=100
# 

#
# Basic plan:
# Verify and convert inputs as needed
# Set correct git branch, master for most, ashs-t1 for ashs-pmc-t1
# Download the appropriate atlas
# Run ashs_main.sh
# Build itksnap file
# Deal with ASHS-HarP
#   Download atlas
#   Run ashs_main.sh
#   Add outputs to itksnap file
# Copy everything to the output directory


CmdName=$(basename "$0")

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

function installAshsAtlas {
        
    local Atlas="$1"
    local AtlasJson=$(jq -r 'select(.Atlas == "'"${Atlas}"'")' "$AshsAtlasConfigFile")

    local AtlasDirectory=$(echo "$AtlasJson" | jq -r '.Directory')
    local AtlasFile="${AshsAtlasesDir}/${Atlas}.tgz"
    local Url=$(echo "$AtlasJson" | jq -r '.Url')

    [ -d "$AtlasDirectory" ] || sys mkdir -p "$AtlasDirectory"

    [ -e "$AtlasFile" ] || sys time wget -q -O "$AtlasFile" "$Url" 

    [ -n "${opt_d}${opt_v}" ] && echo -n "Verifying '$Atlas' " 1>&2

    local md5Url=$(echo "$AtlasJson" | jq -r '.md5Url')
    local AtlasMd5Sum=$(sys wget -q -O - "$md5Url" | awk '{print $1}')

    local DownloadedMd5Sum=$(sys md5sum "$AtlasFile" | awk '{print $1}')

    if [ "$AtlasMd5Sum" == "$DownloadedMd5Sum" ]
    then
	[ -n "${opt_d}${opt_v}" ] && echo "Verified" 1>&2
    else
	[ -n "${opt_d}${opt_v}" ] && echo "Failed : '$AtlasMd5Sum' != '$DownloadedMd5Sum'" 1>&2

	echo "${CmdName} : Download of Atlas '${Atlas}' failed.  Bailing" 1>&2
	exit 1
    fi

    sys tar -xzf "$AtlasFile" -C "$AshsAtlasesDir" 
    
    echo "$AtlasJson"
}

function niftiIfNeeded {
    local InputFile="$1"
    local NiftiFile
    
    # Convert to nifi if needed
    if echo "$InputFile" | grep -q ".nii.gz$"
    then
	NiftiFile="$InputFile"
    elif file "$InputFile" | grep -q "Zip archive data"
    then
	DicomDir=$(mktemp -d "${TmpDir}/DicomDir-XXXXXXX")
	[ -d "$DicomDir" ] || mkdir -p "$DicomDir"

	NiftiFile="${TmpDir}/$(basename "$InputFile" | sed 's/.zip$//; s/.dicom//; s/$/.nii.gz/')"
	unzip -qq -j -d "$DicomDir" "$InputFile" 
	SeriesID="$(c3d -dicom-series-list "$DicomDir" | tail -n 1 | awk '{print $NF}')"

	# -dicom takes two arguments so  -o follows 
	c3d -dicom-series-read "$DicomDir" "$SeriesID" -o "$NiftiFile" 
	rm -rf "$DicomDir"
    else
	echo "$cmd : Unrecognized input type '$InputFile'" 1>&2
	exit 1
    fi

    realpath "$NiftiFile"
}

function uploadQaFile {
	local ProjectPath="$1"
	local File="$2"

	local Tags=

	case "$File" in
		*left*.png)
			Tags=ReadyforASHSQC-left
			;;

		*right*.png)
			Tags=ReadyforASHSQC-right
			;;

	esac

	sys fwuploadfile -p "$ProjectPath" -t "$Tags" "$File"
}

apt install -y wget jq git time 
export ASHS_ROOT=/app/ashs
export PATH="${ASHS_ROOT}/bin":$PATH

AshsAtlasesDir="/app/atlas/data"
AshsAtlasConfigFile="/app/AshsAtlasesConfig.json"
ConfigJsonFile="config.json"
InputDir=${FLYWHEEL_INPUT}
OutputDir=${FLYWHEEL_OUTPUT}
TestDataDir=${FLYWHEEL}/testdata
TMPDIR=/tmp

RunDate=$(date +%Y-%m-%d_%H-%M)

SHIFT_LEFT=0
SHIFT_RIGHT=100
SHIFT_ICV=200

if [ ! -e "${ASHS_ROOT}/bin/identity.mat" ]
then
    
    cat << EOF > "${ASHS_ROOT}/bin/identity.mat"
1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1
EOF
fi

opt_v=1

while getopts 1:2:c:dnq:tvw: arg
do

    case "$arg" in
	1|2|c|d|n|q|t|v|w)
	    eval "opt_${arg}='${OPTARG:=1}'"
	    ;;
    esac
done

shift $(($OPTIND - 1))

git clone 'https://github.com/brainsciencecenter/flywheel.git'
export PATH=${FLYWHEEL}/flywheel/bin:$PATH

sys sed -i 's,| bc,| /usr/bin/bc,' /app/ashs/bin/ashs_grid.sh

[ -n "$opt_c" ] && ConfigJsonFile="$opt_c"

[ -n "$opt_d" ] && [ -e "$ConfigJsonFile" ] && jq -r . "$ConfigJsonFile"
[ -n "$opt_d" ] && find ${FLYWHEEL}

jq -r . "$ConfigJsonFile"

T1InputId=$(jq -r '.inputs.T1w.hierarchy.id' "$ConfigJsonFile")
ProjectId=$(fwget -1 "$T1InputId" | jq -r .parents.project)

if [ -z "$opt_q" ]
then

	QaPlacement=$(jq -r '.config.QaPlacement' "$ConfigJsonFile")
	if [ -n "$QaPlacement" ]
	then
		opt_q="$QaPlacement"
	else
		opt_q=$(fwget -1 "$ProjectId" | jq -r '.info.AshsSettings.QaLocation')
	fi
fi

if [ -n "$opt_w" ]
then
    WorkDir=$opt_w
    [ -d "$WorkDir" ] || sys mkdir "$opt_w"
else
    WorkDir=$(sys mktemp -d /tmp/ashs-XXXXXX)
fi
[ -d "$WorkDir" ] || mkdir "$WorkDir"
TmpDir="$WorkDir"

#
# Find the atlas list
#   Config file
#   Project default
#   Command args


if [ -e "$ConfigJsonFile" ]
then
	T1Input=$(jq -r '.inputs.T1w.location.path' "$ConfigJsonFile" | grep -v null)
	Atlases=( $(jq -r '.config.ASHS_Atlases' "$ConfigJsonFile" | grep -v null | grep -v None) )
fi

if [ -z "$Atlases" ]
then
	Atlases=( $(fwget -1 "$ProjectId" | jq -r '.info.AshsSettings.DefaultAtlas' | sed 's/, */ /g') )
fi

#
if [ -n "$1" ] && [ "$1" == "all" ]
then
    Atlases=( $(jq -r '.Atlas' "$AshsAtlasConfigFile" | sort ) )
elif [ -n "$1" ]
then
    Atlases=( "$1" )
fi

#
# Make sure there is at least one atlas with json to back it up
#
Atlas="${Atlases[0]}"
AtlasJson=$(jq -r 'select(.Atlas == "'"${Atlas}"'")' "$AshsAtlasConfigFile")

if [ -z "$AtlasJson" ]
then   
    echo "${CmdName} : No valid Atlas supplied '$Atlas'" 1>&2
    echo "${CmdName} : Valid Atlases are: "1>&2
    jq -r '.Atlas' "$AshsAtlasConfigFile" 1>&2
    exit 1
fi

for Atlas in "${Atlases[@]}"
do
	unset T1Input
	unset T2Input

        AtlasJson=$(installAshsAtlas "$Atlas")
        if [ -z "$AtlasJson" ]
	then
	    exit 1
	fi
	
	[ -e "$ConfigJsonFile" ] && T1Input=$(jq -r '.inputs.T1w.location.path' "$ConfigJsonFile" | grep -v null)
	[ -n "$opt_1" ] && T1Input="$opt_1"

	[ -n "$opt_t" ] && [ -z "$T1Input" ] && T1Input=$(echo "$AtlasJson" | jq -r .Inputs.T1) 
	if [ -z "$T1Input" ] || [ ! -e "$T1Input" ]
	then
	    echo "$CmdName : reqiured argument T1 missing. No -1 argument and not found in config.json" 1>&2
	    echo "$syntax" 1>&2
	    continue
	fi

	T1NiftiFile=$(niftiIfNeeded "$T1Input")
	T1NiftiFileStandIn=$(mktemp /tmp/T1-XXXXXXXXXX.nii.gz)
	cp "$T1NiftiFile" "$T1NiftiFileStandIn"

	IdString=$(basename "$T1NiftiFile" | sed -r 's/.gz$//; s/.zip$//; s/(.nii|.nifti|.dicom|.dcm)$//')

	width=$(c3d "$T1NiftiFileStandIn" -info-full | grep "Image Dimensions" | awk '{print $4}' | sed 's/[[,]//g')
	height=$(c3d "$T1NiftiFileStandIn" -info-full | grep "Image Dimensions" | awk '{print $5}' | sed 's/[[,]//g')
	sx=$(c3d "$T1NiftiFileStandIn" -info-full | grep "Voxel Spacing" | awk '{print $4}' | sed 's/[][,]//g')
	sy=$(c3d "$T1NiftiFileStandIn" -info-full | grep "Voxel Spacing" | awk '{print $5}' | sed 's/[][,]//g')
	sz=$(c3d "$T1NiftiFileStandIn" -info-full | grep "Voxel Spacing" | awk '{print $6}' | sed 's/[][,]//g')
	smax=$(python -c "print(max([$sx,$sy,$sz]))")
	smin=$(python -c "print(min([$sx,$sy,$sz]))")
	aspect_ratio_min=$(python -c "print( float($smin)/float($smax))")
	aspect_ratio_max=$(python -c "print( float($smax)/float($smin))")

	T1NiftiFileStandInTrimmed=$(echo "${T1NiftiFileStandIn}" | sed 's/.nii.gz/-trimmmed&/')
	if (( $width > 40 )) && (( $height > 40 )) ; then
        	if [[ $(echo "$aspect_ratio_max < 3" | bc) == 1 ]] && [[ $(echo "$aspect_ratio_min > 0.33" | bc) == 1 ]] ; then
                	trim_script=./trim_neck.sh
                	MASKDIR="$TMPDIR"/mask
                	INTERDIR="$TMPDIR"/inter
                	if [ ! -d "$MASKDIR" ] ; then mkdir -p "$MASKDIR" ; fi
                	if [ ! -d "$INTERDIR" ] ; then mkdir -p "$INTERDIR" ; fi
                	"$trim_script" -m "$MASKDIR" -w "$INTERDIR" "$T1NiftiFileStandIn" "$T1NiftiFileStandInTrimmed"
        	else
                	echo "Wrong scan input: the aspect ratio of the image is < 0.33 or > 3."
                	exit 1
        	fi
	else
        	echo "Wrong scan input: the width or/and the height of image is inferior to 40."
        	exit 1
	fi

	T2Input="$T1Input"
	Inputs=$(echo "$AtlasJson" | jq -r '.Inputs | keys | @csv' | sed 's/"//g')
	if echo "$Inputs" | grep -q T2
	then
	    T2InputNeeded=1
	    [ -e "$ConfigJsonFile" ] && T2Input=$(jq -r '.inputs.T2w.location.path' "$ConfigJsonFile" | grep -v null)
	    [ -n "$opt_2" ] && T2Input="$opt_2"
	    [ -n "$opt_t" ] && [ -z "$T2Input" ] && T2Input=$(echo "$AtlasJson" | jq -r .Inputs.T2)

	fi

	T2NiftiFile=$(niftiIfNeeded "$T2Input")

	if [ "$T1NiftiFile" == "$T2NiftiFile" ] 
	then
		T2NiftiFileStandIn="$T1NiftiFileStandInTrimmed"
	else
		T2NiftiFileStandIn=$(mktemp /tmp/T2-XXXXXXXXXX.nii.gz)
		cp "$T2NiftiFile" "$T2NiftiFileStandIn"
	fi


	AtlasDirectory=$(echo "$AtlasJson" | jq -r '.Directory')
	#
	AshsCmd=(
	    bash -x ashs_main.sh -d -a "$AtlasDirectory"  -g "$T1NiftiFileStandInTrimmed" -f "$T2NiftiFileStandIn"  -w "$WorkDir"  -P
	)

	GitBranch="master"
	[ "$i" == "ASHS-PMC-T1" ] && GitBranch="ashs-t1"
	(cd "/app"; sys git checkout --recurse-submodules "$GitBranch" )

	#
	# *** Do we need to worry about ASHS_HOOK_SCRIPT/DATA ?
	#
	[ -d "$opt_d" ] || sys "${AshsCmd[@]}" || exit "$?"

	AshsPrefix=$(basename "$WorkDir")
	SnaplabelsInputTxtFile="${AtlasDirectory}/snap/snaplabels.txt"
	SnaplabelsOutputTxtFile="${OutputDir}/${IdString}_${Atlas}_snaplabels.txt"
	ItkSnapFile=${OutputDir}/${IdString}_${Atlas}_results.itksnap

	bash -x ./ashsFwResultsHandler -a "$Atlas" -A "$AtlasDirectory" -c "$ConfigJsonFile" -i "$IdString" -o "$OutputDir" -l "$SHIFT_LEFT" -r "$SHIFT_RIGHT" -I "$SHIFT_ICV" -1 "$T1NiftiFile" -2 "$T2NiftiFile" -t "$T1NiftiFileStandInTrimmed" -w "$WorkDir" -q "$opt_q"
#
#	awk '{ if ( !($1 ~ /^ *[0-9]+$/) || $1 == 0) { print  }  }' "$SnaplabelsInputTxtFile" > "$SnaplabelsOutputTxtFile"
#	awk '{ if ($1 ~ /^ *[0-9]+$/ && $1 > 0) { gsub(/^"/,"\"Left ",$8); printf("%5d %5d %4d %4d       %2d %2d %2d    %s\n",$1 + '"$SHIFT_LEFT"',$2,$3,$4,$5,$6,$7,$8)   }} ' "$SnaplabelsInputTxtFile" >> "$SnaplabelsOutputTxtFile"
#	awk '{ if ($1 ~ /^ *[0-9]+$/ && $1 > 0) { gsub(/^"/,"\"Right ",$8); printf("%5d %5d %4d %4d       %2d %2d %2d    %s\n",$1 + '"$SHIFT_RIGHT"',$2,$3,$4,$5,$6,$7,$8)   }} ' "$SnaplabelsInputTxtFile" >> "$SnaplabelsOutputTxtFile"
#
#	sys ls "$WorkDir"
#
#	#
#	# Older versions had different tags for T1 under ASHS-HarP than the other atlases
#	#
#	#if [ "$Service" == "ASHS-HarP" ]
#	#then
#	#    	T1Tag=T1
#	#else
#	#        T1Tag=T1-MRI
#	#fi
#
#	T1Tag=T1-MRI
#	T2Tag=T2-MRI
#	T1OutputNiftiFile="${OutputDir}/"$(basename "$T1NiftiFileStandInTrimmed")
#	sys cp "$T1NiftiFile" "$OutputDir"
#
#	ITKSnapCmd=( itksnap-wt -layers-add-anat "$T1NiftiFile" -tags-add "$T1Tag" -layers-list -o "$ItkSnapFile" )
#
#	if [ -n "$T2InputNeeded" ]
#	then
#		T2OutputNiftiFile="${OutputDir}/"$(basename "$T2NiftiFile")
#		sys cp "$T2NiftiFile" "$T2OutputNiftiFile"
#
#		ITKSnapCmd=( itksnap-wt -layers-add-anat "$T1NiftiFileStandInTrimmed" -tags-add "T1Tag" -layers-add-anat "$T2OutputNiftiFile" -tags-add "$T2Tag" -layers-list -o "$ItkSnapFile" )
#	fi
#
#	# Create T1 or T1+T2 MRI result file
#	sys "${ITKSnapCmd[@]}"
#
#	AcquisitionId=$(jq -r '.inputs.T1w.hierarchy.id' "$ConfigJsonFile")
#	
#	if [ "$Atlas" == "ASHS-HarP" ]
#	then
#
#		LeftHippocampusVolume=$(sys awk '{print $5}' ${WorkDir}/final/${AshsPrefix}_left_bootstrap_corr_nogray_volumes.txt)
#		RightHippocampusVolume=$(sys awk '{print $5}' ${WorkDir}/final/${AshsPrefix}_right_bootstrap_corr_nogray_volumes.txt)
#		sys fwUpdateInfo -f -p .PICSL_sMRI_biomarkers -j "+={\"LeftHippocampusVolume\": ${LeftHippocampusVolume}, \"RightHippocampusVolume\": ${RightHippocampusVolume} }" "$AcquisitionId"
#
#		for what in heur corr_usegray corr_nogray
#		do
#		    sys c3d														\
#		    		"$WorkDir/final/${AshsPrefix}_left_lfseg_${what}.nii.gz" -shift $SHIFT_LEFT -replace $SHIFT_LEFT 0	\
#				"$WorkDir/final/${AshsPrefix}_right_lfseg_${what}.nii.gz" -shift $SHIFT_RIGHT -replace $SHIFT_RIGHT 0	\
#				-add -type uchar 											\
#				-o "${OutputDir}/${IdString}_${Atlas}_lfseg_${what}.nii.gz"
#		done
#
#	# Add in the next 3 layers
#		sys itksnap-wt -i "$ItkSnapFile" \
#		   -las "${OutputDir}/${IdString}_${Atlas}_lfseg_corr_usegray.nii.gz" -psn "JLF/CL result" \
#		   -las "${OutputDir}/${IdString}_${Atlas}_lfseg_corr_nogray.nii.gz" -psn "JLF/CL-lite result" \
#		   -las "${OutputDir}/${IdString}_${Atlas}_lfseg_heur.nii.gz" -psn "JLF result" \
#		   -labels-clear \
#		   -labels-add "$SnaplabelsInputTxtFile" $SHIFT_LEFT "Left %s" \
#		   -labels-add "$SnaplabelsInputTxtFile" $SHIFT_RIGHT "Right %s" \
#		   -o "$ItkSnapFile"
#
#		ItkSnapIcvFile=${OutputDir}/${IdString}_ASHS-ICV_results.itksnap
#		ItkSnapHarPIcvFile=${OutputDir}/${IdString}_ASHS-HarP-ICV_results.itksnap
#		if [ -e "$ItkSnapFile" ]
#		then
#			sys itksnap-wt -i "$ItkSnapIcvFile" \
#			   -las "${OutputDir}/${IdString}_${Atlas}_lfseg_corr_usegray.nii.gz" -psn "JLF/CL result" \
#			   -las "${OutputDir}/${IdString}_${Atlas}_lfseg_corr_nogray.nii.gz" -psn "JLF/CL-lite result" \
#			   -las "${OutputDir}/${IdString}_${Atlas}_lfseg_heur.nii.gz" -psn "JLF result" \
#			   -labels-add "$SnaplabelsInputTxtFile" $SHIFT_LEFT "Left %s" \
#			   -labels-add "$SnaplabelsInputTxtFile" $SHIFT_RIGHT "Right %s" \
#			   -o "$ItkSnapHarPIcvFile"
#		fi
#
#        fi
#
#	if [ "$Atlas" == "ASHS-ICV" ]
#	then
#		# Add the ICV image to the project
#		c3d														\
#			"$WorkDir/final/${AshsPrefix}_left_lfseg_corr_nogray.nii.gz" -shift $SHIFT_ICV -replace $SHIFT_ICV 0      	\
#    			-type uchar -o "${OutputDir}/${IdString}_${Atlas}_icv.nii.gz"
#
#		ICV=$(c3d "${WorkDir}/final/${AshsPrefix}_left_lfseg_corr_nogray.nii.gz" -dup -lstat | awk '$1 == 1 {print $7}')
#
#		sys fwUpdateInfo -f -p .PICSL_sMRI_biomarkers -j "+={\"ICV\": ${ICV} }" "$AcquisitionId"
#
#  		sys itksnap-wt -i "$ItkSnapFile" \
#    		   -las "${OutputDir}/${IdString}_${Atlas}_icv.nii.gz" -psn "ICV" \
#		   -labels-clear \
#    		   -labels-add "$SnaplabelsInputTxtFile" "$SHIFT_ICV" "%s" \
#    		   -o "$ItkSnapFile"
#
#		ItkSnapHarPFile=${OutputDir}/${IdString}_ASHS-HarP_results.itksnap
#	 	ItkSnapHarPIcvFile=${OutputDir}/${IdString}_ASHS-HarP-ICV_results.itksnap
#		if [ -e "$ItkSnapFile" ]
#		then
#  			sys itksnap-wt -i "$ItkSnapHarPFile" \
#    			   -las "${OutputDir}/${IdString}_${Atlas}_icv.nii.gz" -psn "ICV" \
#    			   -labels-add "$SnaplabelsInputTxtFile" "$SHIFT_ICV" "%s" \
#    			   -o "$ItkSnapHarPIcvFile"
#		fi
#
#	fi
#
#	sys find "${WorkDir}" -type f
#
#
#	regex=$(echo "$AtlasJson" | jq -r 'if .QaFileRegEx then .QaFileRegEx | @csv else empty end' | sed -r 's/"(.*)"$/(\1)/; s/","/)|(/' )
#	if [ -z "$regex" ]
#	then
#		regex="^$"
#	fi
#
#    	for i in $(find "${WorkDir}" -type f | grep -E "$regex")
#    	do
#    	    BaseName=$(basename "$i" )
#
#	    echo "opt_q = '$opt_q'" 1>&2
#	    echo "BaseName = '$BaseName'" 1>&2
#	    echo "WorkDir = '$WorkDir'" 1>&2
#	    echo "OutputDir = '$OutputDir'" 1>&2
#	    echo "IdString = '$IdString'" 1>&2
#
#    	    OutputFile="${OutputDir}/${IdString}_${Atlas}_${BaseName}"
#
#	    case "$opt_q" in
#	        Analysis|analysis)
#    		    sys cp "$i" "${OutputFile}"
#		    ;;
#
#	        "None"|"null")
#		    true
#		    ;;
#
#		Acquisition|acquisition)
#		    sys cp "$i" "$OutputFile"
#
#		    sys uploadQaFile "$AcquisitionId"  "$OutputFile"
#		    ;;
#
#		*)
#		    sys cp "$i" "$OutputFile"
#
#		    sys uploadQaFile "$opt_q"  "$OutputFile"
#		    ;;
#
#            esac
#	done
#	
#	sys ls -l "$OutputDir"
done

