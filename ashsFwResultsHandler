#!/bin/bash

CmdName=$(basename "$0")

echo "$0" 1>&2

Syntax="${CmdName} [-a Atlas][-A AtlasDirectory][-C AshsAtlasConfigFile][-c ConfigJsonFile][-i IdString][-o OutputDir][-l ShiftLeft][-r ShiftRight][-I ShiftIcv][-1 T1NiftiFile][-2 T2NiftiFile][-t T1NiftiFileTrimmed][-v][-w WorkDir][-q QaLocation]"

#
# export PATH=$PATH:.
# bash -x ./ashsFwResultsHandler -v -C ./AshsAtlasesConfig.json  -a ASHS-PMC-T2 -A ../atlas/data/ashs_atlas_upennpmc_20170810 -c ../data/input/config.json-01-PMC-T2 -i ASHS-PMC-T2-wd-uDiz45  -o /tmp/ashs/output -l 0 -r 100 -I 200 -1 ../data/input/01_7_anat_T1w.nii.gz  -2 ../data/input/01_18_anat_T2w_acq_2DHiResMTL.nii.gz  -t ../data/input/7_anat_T1w-trimmed.nii.gz -w /tmp/ashs/ASHS-PMC-T2-wd-uDiz45  -q Acquisition
# 

while getopts a:A:C:c:i:o:l:r:I:1:2:t:w:vq: arg 
do
	case "$arg" in
	       	a|A|C|c|i|o|l|r|I|1|2|t|w|v|q)
			eval "opt_${arg}='${OPTARG:=1}'"
			;;

	esac
done

shift $(("$OPTIND" - 1))

Atlas="$opt_a"
AtlasDirectory="$opt_A"
AshsAtlasConfigFile="$opt_C"
ConfigJsonFile="$opt_c"
IdString="$opt_i"
OutputDir="$opt_o"
SHIFT_LEFT="$opt_l"
SHIFT_RIGHT="$opt_r"
SHIFT_ICV="$opt_I"
T1NiftiFile="$opt_1"
T1NiftiFileTrimmed="$opt_t"
T2NiftiFile="$opt_2"
WorkDir="$opt_w"

T1Tags=$(jq 'if (.inputs.T1w.object.tags) then .inputs.T1w.object.tags else empty end' "$ConfigJsonFile")
if [ "$T1NiftiFile" == "$T2NiftiFile" ]
then
	T2InputNeeded=
	T2Tags="$T1Tags"
else
	T2InputNeeded=1
	T2Tags=$(jq 'if (.inputs.T1w.object.tags) then .inputs.T2w.object.tags else empty end' "$ConfigJsonFile")
fi

AshsPrefix=$(basename "$WorkDir")

[ -z "$AshsAtlasConfigFile" ] && AshsAtlasConfigFile="/app/AshsAtlasesConfig.json"
AtlasJson=$(jq -r 'select(.Atlas == "'"${Atlas}"'")' "$AshsAtlasConfigFile")

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$(date): $@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

function uploadQaFile {
        local ProjectPath="$1"
        local File="$2"
	local Tags=( $(echo "$3" | sed 's/,/ /g') )


        case "$File" in
                *left*.png)
			Tags+=(ReadyforASHSQC-left)
                        ;;

                *right*.png)
			Tags+=(ReadyforASHSQC-right)
                        ;;

        esac

	sys fwuploadfile -p "$ProjectPath" -t "$(echo ${Tags[@]} | sed 's/  */,/g')" "$File"
}

	ItkSnapFile=${OutputDir}/${IdString}_${Atlas}_results.itksnap

	SnaplabelsInputTxtFile="${AtlasDirectory}/snap/snaplabels.txt"

	sys ls "$WorkDir"


	# Copy in all the ashs workspace files to the output directory 


	#
	# Don't really want to pass the input tags through to the ashs outputs
	# 
#	if [ -n "$T1Tags" ] || [ -n "$T2Tags"]
#	then
#	    T1T2Tags=$(echo "${T1Tags} ${T2Tags}" | jq -r -s 'add | sort | unique | @csv' | sed 's/"//g')
#	    GenMetadataFileArgs+=( -t "$T1T2Tags" )
#	fi

	OutputDirJson=$(echo "$AtlasJson" | jq -r '.OutputDir')
	FileRegEx=""
	while read regex
	do
	    FileRegEx+="|($regex)"
	done < <(echo "$OutputDirJson" | jq -r '.[].FileRegEx')
	
	OutputFileRegEx=$(echo "$FileRegEx" | sed 's/^|//')
	AshsOutputFiles=()
	while read filename
	do
	    AshsOutputFiles+=( "$filename")
	done < <(find "$WorkDir" -type f | grep -E "$OutputFileRegEx")
	
	sys genMetadataFile -v -a "$Atlas" "${GenMetadataFileArgs[@]}" -c "$ConfigJsonFile" -i "$IdString" -o "$OutputDir" "${AshsOutputFiles[@]}"
	[ -e "output/.metadata.json" ] && cp output/.metadata.json output/.metadata.json."$Atlas"

	# Build the ITKSnap Workspace files

	T1Tag=T1-MRI
	T2Tag=T2-MRI
	T1OutputNiftiFile="${OutputDir}/"$(basename "$T1NiftiFileTrimmed")
	T2OutputNiftiFile="${OutputDir}/"$(basename "$T2NiftiFile")

	AcquisitionId=$(jq -r '.inputs.T2w.hierarchy.id' "$ConfigJsonFile")
	if [ "$AcquisitionId" == "null" ]
	then
	    AcquisitionId=$(jq -r '.inputs.T1w.hierarchy.id' "$ConfigJsonFile")
	fi

	AnalysisId=$(jq -r '.destination.id' "$ConfigJsonFile")
	JobId=$(jq -r '.job.id' "$ConfigJsonFile")
	JobUrl="https://upenn.flywheel.io/#/jobs/${JobId}"
	DateTime=$(date --iso-8601=seconds -u)
	if [ "$Atlas" == "ASHS-ICV" ]
	then
	    sys c3d													\
		"${OutputDir}/${IdString}_${Atlas}_icv.nii.gz" -shift $SHIFT_ICV -replace $SHIFT_ICV 0 	\
	         -type uchar												\
		 -o "${OutputDir}/${IdString}_${Atlas}_icv.nii.gz"
        else
	    for what in heur corr_usegray corr_nogray
	    do
	        sys c3d														\
		        "${OutputDir}/${IdString}_${Atlas}_lfseg_${what}_left.nii.gz" -shift $SHIFT_LEFT -replace $SHIFT_LEFT 0	\
			"${OutputDir}/${IdString}_${Atlas}_lfseg_${what}_right.nii.gz" -shift $SHIFT_RIGHT -replace $SHIFT_RIGHT 0	\
			  -add -type uchar 											\
			  -o "${OutputDir}/${IdString}_${Atlas}_blseg_${what}.nii.gz"

		    sys c3d "${OutputDir}/${IdString}_${Atlas}_blseg_${what}.nii.gz" -info
	    done
	fi

	# Create the ITKSnap Workspace file

	ITKSnapCmd=( itksnap-wt -layers-add-anat "${OutputDir}/${IdString}_${Atlas}_highresmri.nii.gz" )

#	if [ -n "$T2InputNeeded" ]
#	then
#		sys cp "$T2NiftiFile" "$T2OutputNiftiFile"
#
#		ITKSnapCmd+=( -layers-add-anat "$T2OutputNiftiFile" -tags-add "$T2Tag" )
#	fi

	if [ "$Atlas" == "ASHS-ICV" ]
	then

		sys c3d "${OutputDir}/${IdString}_${Atlas}_highresmri.nii.gz" -info

		ICV=$(c3d "${OutputDir}/${IdString}_${Atlas}_icv.nii.gz" -dup -lstat | tail -n 1 | awk '{print $7}')

# *** is this needed?  I thought all this was going into the Atlas specific json
		sys fwUpdateInfo -f -p .PICSL_sMRI_biomarkers -j "+={\"ICV\": ${ICV} }" "$AcquisitionId"

		ITKSnapCmd+=(
		    -las "${OutputDir}/${IdString}_${Atlas}_icv.nii.gz" -psn ICV 
		    -labels-add "$SnaplabelsInputTxtFile" "$SHIFT_ICV" "%s" 
		)

	else

		if [ "$Atlas" == "ASHS-HarP" ]
		then
			LeftHippocampusVolume=$(sys awk '{print $5}' ${WorkDir}/final/${AshsPrefix}_left_bootstrap_corr_nogray_volumes.txt)
			RightHippocampusVolume=$(sys awk '{print $5}' ${WorkDir}/final/${AshsPrefix}_right_bootstrap_corr_nogray_volumes.txt)

# *** is this needed?  I thought all this was going into the Atlas specific json
# Atlas info is in the metadata, the stuff digging it out only needs to wait for all the ashs runs to be re-run and populate the data
# '.info.PICSL_sMRI_biomarkers["ASHS-HarP"].Metrics.left_bootstrap_corr_nogray_volumes_txt.Hippocampus' off the acquisition
# '.info.PICSL_sMRI_biomarkers["ASHS-HarP"].Metrics.right_bootstrap_corr_nogray_volumes_txt.Hippocampus' off the acquisition
# '.info.PICSL_sMRI_biomarkers["ASHS-ICV"].Metrics.left_bootstrap_corr_nogray_volumes_txt'

			sys fwUpdateInfo -f -p .PICSL_sMRI_biomarkers -j "+={\"LeftHippocampusVolume\": ${LeftHippocampusVolume}, \"RightHippocampusVolume\": ${RightHippocampusVolume} }" "$AcquisitionId"
		fi

		ITKSnapCmd+=(
		   -las "${OutputDir}/${IdString}_${Atlas}_blseg_corr_usegray.nii.gz" -psn "JLF/CL result" \
		   -las "${OutputDir}/${IdString}_${Atlas}_blseg_corr_nogray.nii.gz" -psn "JLF/CL-lite result" \
		   -las "${OutputDir}/${IdString}_${Atlas}_blseg_heur.nii.gz" -psn "JLF result" \
		   -labels-clear \
		   -labels-add "$SnaplabelsInputTxtFile" $SHIFT_LEFT "Left %s" \
		   -labels-add "$SnaplabelsInputTxtFile" $SHIFT_RIGHT "Right %s" \
		)
	fi

	# Run the itksnap command for this atlas
	ITKSnapCmd+=( -layers-list -o "$ItkSnapFile" )

	sys "${ITKSnapCmd[@]}"

	# Merge the HarP and ICV ITKSnap Files

	ItkSnapHarPFile="${OutputDir}/${IdString}_ASHS-HarP_results.itksnap"
	ItkSnapIcvFile="${OutputDir}/${IdString}_ASHS-ICV_results.itksnap"
	ItkSnapHarPIcvFile="${OutputDir}/${IdString}_ASHS-HarP-ICV_results.itksnap"

	if [ -e "$ItkSnapHarPFile" ] && [ -e "$ItkSnapIcvFile" ]
	then
		# if there was ICV output, add HarP output to the ICV workspace file 
  		sys itksnap-wt -i "$ItkSnapHarPFile" \
    		    -las "${OutputDir}/${IdString}_ASHS-ICV_icv.nii.gz" -psn "ICV" \
    		    -labels-add "$SnaplabelsInputTxtFile" "$SHIFT_ICV" "%s" \
    		    -o "$ItkSnapHarPIcvFile"
	fi
	
	#
	# Copy in the QA files to the apropriate output
	#

	regex=$(echo "$AtlasJson" | jq -r 'if .QaFileRegEx then .QaFileRegEx | @csv else empty end' | sed -r 's/"(.*)"$/(\1)/; s/","/)|(/g' )
	if [ -z "$regex" ]
	then
		regex="^$"
	fi

    	for i in $(find "${WorkDir}" -type f | grep -E "$regex")
    	do
    	    BaseName=$(basename "$i" )

	    echo "opt_q = '$opt_q'" 1>&2
	    echo "BaseName = '$BaseName'" 1>&2
	    echo "WorkDir = '$WorkDir'" 1>&2
	    echo "OutputDir = '$OutputDir'" 1>&2
	    echo "IdString = '$IdString'" 1>&2

	    NewBaseName=$(echo "$BaseName" | sed "s/${AshsPrefix}_//")
	    OutputFile=$(echo "${OutputDir}/${IdString}_${Atlas}_${NewBaseName}" | sed 's/ICV_qa_seg_multiatlas_corr_nogray_left_qa/ICV_icv_qc/; s/_qa/_qc/g; s/qa_//; s/_qc_/_/')

	    case "$opt_q" in
	        Analysis|analysis)
    		    sys cp "$i" "${OutputFile}"
		    ;;

	        "None"|"null")
		    true
		    ;;

		Acquisition|acquisition)
		    sys cp "$i" "$OutputFile"

		    sys uploadQaFile "$AcquisitionId"  "$OutputFile" "$Atlas"
		    ;;

		*)
		    sys cp "$i" "$OutputFile"

		    sys uploadQaFile "$opt_q"  "$OutputFile" "$Atlas"
		    ;;

            esac
	done

	sys txt2json -v -w "$WorkDir" -a "$Atlas" -j "$JobId" -A "$AnalysisId" -d "$DateTime"  > "${OutputDir}/${Atlas}.json"
	sys fwUpdateInfo -f -p .PICSL_sMRI_biomarkers -j "{ \"$Atlas\": $(< ${OutputDir}/${Atlas}.json) }" "$AcquisitionId"
	sys updateModifiedTimestamp "$AcquisitionId"

	fwget -1 "$AcquisitionId" | jq -r '.info.PICSL_sMRI_biomarkers' > "${OutputDir}/PICSL_sMRI_biomarkers.json"
	
	sys ls -la "$OutputDir"

	NumberMetadataFiles=$(ls "$OutputDir"/.metadata.json.* | wc -l )
	if [ "$NumberMetadataFiles" -gt 1 ]
	then
		# combine all the metadata files back in to the main metadata file
		sys jq '.analysis.files[]' "$OutputDir"/.metadata.json.* | sys jq -s '{"analysis": { "files": . } }' > "$OutputDir"/.metadata.json
	fi

	[ -e "${OutputDir}/.metadata.json" ] && cat "${OutputDir}/.metadata.json"

	for i in $(ls "${OutputDir}" | grep ".*${Atlas}.*.nii.gz")
	do
		c3d "${OutputDir}/${i}" -info
	done

